import os
import sys
import json

# Les variables globales sont d√©finies par convention en majuscule

CUR_DIR = os.path.dirname(__file__) # permet de r√©cup√©rer le chemin du dossier parent du fichier courant
LISTE_PATH = os.path.join(CUR_DIR, "liste.json") # on concat√®ne le chemin du dossier parent avec le nom du fichier .json

MENU = """Choisissez parmi les 5 options suivantes :
1 : Ajouter un √©l√©ment √† la liste
2 : Retirer un √©l√©ment de la liste
3 : Afficher la liste
4 : Vider la liste
5 : Quitter
üëâ Votre choix : """

CHOIX_MENU = [str(i) for i in range(1, 6)] # contient les choix que l'utilisateur peut faire, on v√©rifie que son choix est bien dans la liste

if os.path.exists(LISTE_PATH): # si le chemin vers la liste .json existe
    with open(LISTE_PATH, "r") as f: # on ouvre le fichier et on le stocke dans une variable f
        LISTE = json.load(f) # on lit son contenu et on le stocke dans une variable LISTE
else: # sinon
    LISTE = [] # on g√©n√®re une liste vide

while True:
    choix_utilisateur = "" # on d√©clare une variable vide pour boucler au moins une fois dans la boucle du dessous
    while choix_utilisateur not in CHOIX_MENU: # tant que le choix fait par l'utilisateur ne fait pas partie des options de CHOIX_MENU
        choix_utilisateur = input(MENU) # on lui demande de choisir
        if choix_utilisateur not in CHOIX_MENU: # puis on v√©rifie si le choix qu'il a fait fait partie de CHOIX_MENU
            print("Votre choix ne fait pas partie des options...")
        print("-" * 50)
    
    if choix_utilisateur == "1":
        element = input("Entrez l'√©l√©ment √† ajouter √† votre liste de courses : ") # on demande l'√©l√©ment √† ajouter √† la liste
        LISTE.append(element) # on l'ajoute √† la liste
        print(f"L'√©l√©ment {element} a bien √©t√© ajout√© √† votre liste !") # on affiche que l'√©l√©ment a bien √©t√© ajout√© √† la liste
    elif choix_utilisateur == "2":
        element = input("Entrez le nom de l'√©l√©ment √† retirer de votre liste de courses : ") # on demande l'√©l√©ment √† retirer
        if element in LISTE: # on v√©rifie si l'√©l√©ment est bien pr√©sent dans la liste
            LISTE.remove(element) # si oui, on le retire
            print(f"L'√©l√©ment {element} a bien √©t√© retir√© de la liste !") # on affiche qu'il a √©t√© retir√©
        else: # sinon
            print(f"L'√©l√©ment {element} ne fait pas partie de la liste !") # on affiche que l'√©l√©ment n'est pas dans la liste
    elif choix_utilisateur == "3":
        if LISTE: # si la liste n'est pas vide
            print("Voici ce que contient votre liste :")
            for i, element in enumerate(LISTE, 1): # enumerate permet de r√©cup√©rer les indices et √©l√©ments d'une liste, ici on fait d√©marrer √† 1 au lieu de 0
                print(f"{i}. {element}") # ici on affiche l'indice en i et l'√©l√©ment en element
        else:
            print("Votre liste ne contient aucun √©l√©m√©nt !") # on affiche que la liste ne contient rien
    elif choix_utilisateur == "4":
        if LISTE: # si la liste n'est pas vide
            LISTE.clear() # on la vide
            print("Votre liste de courses a √©t√© vid√©e !") # on indique que la liste a √©t√© vid√©e
        else: # si elle est vide
            print("Votre liste ne contient aucun √©l√©m√©nt !") # on indique qu'elle ne contient rien
    elif choix_utilisateur == "5":
        with open(LISTE_PATH, "w") as f: # avant de fermer le script, on ouvre √† nouveau la liste .json mais en mode √âCRITURE
            json.dump(LISTE, f, indent=4) # on √©crit le contenu de LISTE dans la variable f qu'on indente de 4 pour la lisibilit√©
        print("√Ä bient√¥t !")
        sys.exit()
    
    print("-" * 50)